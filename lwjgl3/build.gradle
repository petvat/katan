buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
//// using jpackage only works if the JDK version is 14 or higher.
//// your JAVA_HOME environment variable may also need to be a JDK with version 14 or higher.
//    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
//      classpath "org.beryx:badass-runtime-plugin:1.13.0"
//    }
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}
plugins {
  id "io.github.fourlastor.construo" version "1.2.0"
  id "application"
}

apply plugin: 'org.jetbrains.kotlin.jvm'

//if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
//  apply plugin: 'org.beryx.runtime'
//} else {
//  apply plugin: 'application'
//}


import io.github.fourlastor.construo.Target

sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]
mainClassName = 'io.github.petvat.katan.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-lwjgl3'
java.sourceCompatibility = 11
java.targetCompatibility = 11

dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

//  testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
//  testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
//  testImplementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"

  implementation project(':core')
//  testImplementation project(':core')
  testImplementation project(':shared')
  // testImplementation "io.mockk:mockk:$mockkVersion"
  //testImplementation 'org.mockito:mockito-core:5.15.2'
}

def jarName = "${appName}-${version}.jar"
def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
// sets the name of the .jar file this produces to the name of the game or app.
  archiveFileName.set(jarName)
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
  destinationDirectory = file("${project.layout.buildDirectory.asFile.get().absolutePath}/lib")
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
// setting the manifest makes the JAR runnable.
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}
construo {
  // name of the executable
  name.set(appName)
  // human-readable name, used for example in the `.app` name for macOS
  humanName.set(appName)
  // Optional, defaults to project version
  version.set("0.0.0")
  targets.configure {
    create("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.11_9.tar.gz")
    }
    create("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.11_9.tar.gz")
      // macOS needs an identifier
      identifier.set("i.should.be.changed.before.merge." + appName)
      // Optional: icon for macOS
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_mac_hotspot_17.0.11_9.tar.gz")
      // macOS needs an identifier
      identifier.set("i.should.be.changed.before.merge." + appName)
      // Optional: icon for macOS
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_windows_hotspot_17.0.11_9.zip")
//if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
//  tasks.jpackageImage.doNotTrackState("This task both reads from and writes to the build folder.")
//  runtime {
//    options.set(['--strip-debug',
//                 '--compress', '2',
//                 '--no-header-files',
//                 '--no-man-pages',
//                 '--strip-native-commands',
//                 '--vm', 'server'])
//// you could very easily need more modules than this one.
//// use the lwjgl3:suggestModules task to see which modules may be needed.
//    modules.set([
//      'jdk.unsupported'
//    ])
//    distDir.set(file(project.layout.buildDirectory))
//    jpackage {
//      imageName = appName
//// you can set this to false if you want to build an installer, or keep it as true to build just an app.
//      skipInstaller = true
//// this may need to be set to a different path if your JAVA_HOME points to a low JDK version.
//      jpackageHome = javaHome.getOrElse("")
//      mainJar = jarName
//      if (os.contains('win')) {
//        imageOptions = ["--icon", "icons/logo.ico"]
//      } else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
//        imageOptions = ["--icon", "icons/logo.png"]
//      } else if (os.contains('mac')) {
//// If you are making a jpackage image on macOS, the below line should work thanks to StartupHelper.
//        imageOptions = ["--icon", "icons/logo.icns"]
//// If the above line doesn't produce a runnable executable, you can try using the below line instead of the above one.
////        imageOptions = ["--icon", "icons/logo.icns", "--java-options", "\"-XstartOnFirstThread\""]
//      }
    }
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
  dependsOn 'jar'
}

tasks.register('runCli', JavaExec) {
  group = 'application'
  description = 'Runs the secondary launcher'

  mainClass = 'io.github.petvat.katan.lwjgl3.CliLauncher'
  classpath = sourceSets.main.runtimeClasspath

  workingDir = rootProject.file('assets').path
  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}
//
//tasks.register("runMock", JavaExec) {
//  group = "application"
//  description = "Runs mock"
//
//  mainClass.set("io.github.petvat.katan.lwjgl3.integrationTest")
//
//  // Access sourceSets directly without `.get()`
//  classpath = sourceSets["test"].runtimeClasspath
//
//  workingDir = rootProject.file("assets").path
//
//  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
//
//  dependsOn("testClasses") // Ensure test classes are compiled before running
//}

tasks.register("runMock", JavaExec) {
  group = "application"
  description = "Runs mock"

  mainClass.set("io.github.petvat.katan.lwjgl3.integrationTest")

  // Force JavaExec to use test class files
  classpath = files(sourceSets["test"].output) + sourceSets["test"].runtimeClasspath

  workingDir = rootProject.file("assets").path

  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"


  dependsOn("testClasses") // Ensure test classes are compiled before running
}

if (enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}


test {
  useJUnitPlatform()
}
